{:deps {org.clojure/clojure               {:mvn/version "1.11.1"}
        org.clojure/core.async            {:mvn/version "1.5.648"}
        org.clojure/tools.logging         {:mvn/version "1.2.4"}
        org.clojure/spec.alpha            {:mvn/version "0.3.218"}

        ;; Lets be explicit about logging
        ch.qos.logback/logback-classic    {:mvn/version "1.3.4"}
        ch.qos.logback/logback-core       {:mvn/version "1.3.4"}
        org.slf4j/slf4j-api               {:mvn/version "2.0.3"}
        org.slf4j/jul-to-slf4j            {:mvn/version "2.0.3"}
        org.slf4j/jcl-over-slf4j          {:mvn/version "2.0.3"}
        org.slf4j/log4j-over-slf4j        {:mvn/version "2.0.3"}

        ;; http requests
        clj-http/clj-http                   {:mvn/version "3.12.3"}

        ;; ring
        ring/ring                         {:mvn/version "1.10.0"}
        ring/ring-headers                 {:mvn/version "0.3.0"}
        org.eclipse.jetty/jetty-jmx       {:mvn/version "9.4.51.v20230217"} ;; must match jetty-server version in `ring-jetty-adapter`
        ring/ring-codec                   {:mvn/version "1.2.0"}
        ring/ring-json                    {:mvn/version "0.5.1"}

        ;; mock db and data related
        datascript/datascript               {:mvn/version "0.18.7"}
        clojure.java-time/clojure.java-time {:mvn/version "1.4.2"}
        org.clojure/data.csv                {:mvn/version "1.1.0"}

        ;; JSON
        cheshire/cheshire                 {:mvn/version "5.11.0"}

        ;; TODO dev related but errors with dep missing even when no in dev. Need to decouple. Think
        ;; it might be fullmeta-web complaining?
        org.clojure/tools.namespace  {:mvn/version "1.2.0"}
        org.clojure/java.classpath   {:mvn/version "1.0.0"}
        org.clojure/tools.deps.alpha {:mvn/version "0.13.1168" :exclusions [org.slf4j/slf4j-nop]}}

 :paths ["src" "resources" "fullmeta/web/src"]

 :aliases
 {:main {:main-opts ["-m" "app.main"]
         :jvm-opts ["-Dclojure.tools.logging.factory=clojure.tools.logging.impl/slf4j-factory"]}

  :dev {:extra-paths ["dev"]
        :jvm-opts ["-Denv_type=dev" "-Denv_port=3000" "-Denv_edn=env-dev.edn" "-Denv_domain=127.0.0.1"]}
  :prod {:extra-paths ["prod"]
         :jvm-opts ["-Denv_type=prod" "-Denv_port=80" "-Denv_edn=env-prod.edn" "-Denv_pidfile=../service.pid"]}

  ;; dev$  clojure -M:main:dev           :server :start
  ;; prod$ clojure -M:main:prod :server :start

  ;; General approach to invoking on command line:
  ;; $> clj -M:dev:make :cljs/watch
  ;; $> clj -M:dev:make :cljs/build
  :make         {:main-opts ["-m" "make"]}
  ;;
  ;; $> clj -M:dev:java/compile
  :java/compile {:main-opts ["-m" "make" ":java/compile"]}
  ;; end :aliases
  }}
